title: Installing Wine on Mac
---
last_updated: 2017-09-28
---
intro:

This tutorial is for intermediate users who want to install and use
[Wine](https://www.winehq.org/) on their computer running macOS.
You should already know the basics of how to use the command line.
If you don't, [read this tutorial first](/tutorials/command-line/).

---
summary:

A simple tutorial demonstrating how to install Wine on a macOS computer.
---
toc_ad_id: 3610826013
---
footer_ad_id: 5087559211
---
body:

# What is Wine?

[Wine](https://www.winehq.org/) is awesome.
No, I'm not talking about the kind you drink,
I mean the kind that lets you run Windows apps without the
Windows operating system.
It's kind of Zen, when you think about it.
Oh, and did I mention it's completely free, legal, and open source?

Nowadays, Windows and Mac play nicely together.
You can install Windows and Mac side by side and switch between them using
[Boot Camp](https://support.apple.com/en-us/HT204990), but that requires
a reboot every time, and you can only use one operating system at a time.
You can also use a tool like
[Parallels Desktop](https://www.parallels.com/products/desktop/) or
[VMware Fusion](https://www.vmware.com/products/fusion/)
to virtualize Windows and run it together with Mac,
but virtualization is slow and it takes up a lot of memory.
(Your physical computer creates an imaginary "virtual" computer within itself,
and runs Windows on that. That takes a lot of resources!)
On top of that, all of these solutions require you to own a legal copy
of Windows, which isn't cheap!

Wine is different. When any program runs, it requests resources
like memory and disk space from the operating system.
All that Wine does is make sure that those requests get answered so that
the program can run correctly. As far as the program knows, everything
is going smoothly because it has everything it needs.
It never even realizes that it's not running on Windows!
It's simpler than emulating a whole new computer, so it's faster.
Since it's just translating requests, you don't need a copy of
the actual Windows operating system. Plus, Wine is open source,
which means people are continually improving it and adding new features.
And you can't beat the price!

# Will My Program Work With Wine?

A lot of people discover Wine because they have one specific Windows program
that they need to use, and it's the last thing preventing them from switching
to a different operating system. So, the big question is, will it work?
The short answer is: probably, but it's worth checking.

The Wine project maintains a database called the
[AppDB](https://appdb.winehq.org/) that has
user reviews of how well specific Windows programs work under Wine.
Search for your program and find out! (If it's not listed, that doesn't
necessarily mean that it won't work â€” only that you're apparently trying
to use a very obscure program!)

# Requirements

To install Wine on your Mac, you will need the following:

* macOS 10.10 (Yosemite) or above
* Access to an Admin account, with password
* An internet connection

To [check what version of macOS you're running](https://support.apple.com/en-us/HT201260),
click on the Apple logo on the far left side of the toolbar,
select "About This Mac", and look at your version
number under the big "macOS" or "OS X". If it's 10.10 or higher, you're all set.

You need an Admin account on your Mac because only Admins can install software.
You will need to be logged in to this Admin account during the installation.
If there is only one account on your computer, it is an Admin account.
The account must have a password: if the account has no password,
the `sudo` utility will fail. To set or change your password,
go to the Accounts section in System Preferences.

# Part 1: Install Homebrew

[Homebrew](http://brew.sh/) is a package manager that makes installing
open source programs much easier. In particular, trying to install
a large program like Wine without the help of a package manager would be
tremendously difficult.
Fortunately, Homebrew itself is simple to install: just open up the
Terminal and run this command:

```bash
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
```

The Terminal will tell you what it's about to do, and ask you
if you want to proceed: press Enter to do so.
The Terminal may then ask for a password: this is the password
to the Admin account on your computer. As a security measure,
the Terminal does not display anything as you type, not even
asterisks (*). Type your password anyway, and press Enter. If you get some
kind of error, it might be because the Admin account doesn't have a
password set. Setting a password is required.

Installing Homebrew should only take a few seconds or minutes
(depending on the speed of your internet connection). When it's done,
the Terminal will say that the installation was successful, and ask you to
run brew doctor. Do as it suggests:

```bash
brew doctor
```

This will make Homebrew inspect your system and make sure that everything
is set up correctly. If the Terminal informs you of any issues, you'll need
to fix them yourself, and then run brew doctor again to verify that you
fixed them correctly. When everything is set up correctly, you'll see the
message `Your system is ready to brew`, and you can move on to the next part
of the tutorial.

Note: If Homebrew tells you that you need to agree to the Xcode license,
you can do that by running:

```bash
sudo xcodebuild -license
```

The Terminal window will fill up with the Xcode license:
read it, type agree and hit enter to agree to the license.

# Part 2: Install XQuartz Using Homebrew

Wine needs [XQuartz](http://www.xquartz.org/) to install correctly,
and Homebrew won't automatically pull in this dependency for you.
However, we can easily ask Homebrew to install it by running the following
command:

```bash
brew cask install xquartz
```

Let's break down this command into parts. `brew` refers to Homebrew, which
you just installed. `cask` refers to
[Homebrew Cask](https://github.com/caskroom/homebrew-cask),
an extension to Homebrew that is used to install GUI application on your
computer. (GUI stands for "Graphical User Interface". A GUI application is
an app that you can *see* running, as opposed to invisibly running
in the background.) `install` refers to the fact that you're asking
Homebrew Cask to *install* something on your computer, and `xquartz`
is the name of the thing that you want it to install.
We only need to include the word `cask` because XQuartz is a GUI application --
by default, you use Homebrew to install applications that run on the command
line, and don't have a graphical user interface.

When you run this command, Homebrew will install the Cask extension
automatically, and then Homebrew Cask will download and install XQuartz
for you. (Lots of installers installing other installers!)
Homebrew will display messages and progress bars on the Terminal to let you
know what it's doing. When it's done installing XQuartz, it will stop
displaying messages and wait for you to type in a new command. When that
happens, move on to the next step!

# Part 3: Install Wine Using Homebrew
Now we get to actually install Wine! We'll let Homebrew do all the work,
all you have to do is tell it what you want with this command:

```bash
brew install wine
```

You'll notice that this command is almost identical to the last one, except
we're leaving out the word `cask` (because Wine doesn't have a graphical
user interface), and we're replaced `xquartz` with `wine`.

When you run this command, Homebrew will start automatically downloading
and installing software onto your computer. Wine needs several different
pieces of software to run correctly, not just XQuartz, so Homebrew is going
to first install those *other* dependencies before it installs Wine.
Just as before, Homebrew will display messages and progress bars on the
Terminal to let you know what it's doing.

This step of the tutorial might be very quick, or it might take a long, long
time. You see, software like Wine normally needs to be compiled: transformed
from human-readable source code into a form that a computer can use. This
process usually takes a long time -- for a program like Wine and all of its
depedencies, it might take an hour or two, even for a fast, modern computer.
However, the people who make Homebrew know that people don't like to wait,
and they've pre-compiled most of the software available in Homebrew, including
Wine. Your computer will automatically download the pre-compiled versions
if it is able to, which will make the installation process go a *lot* faster.
However, if your computer is in an unusual configuration, it may not be able
to use the pre-compiled versions. If that's the case, it will have to
compile the software for itself, which will still work, but it will take awhile.

If you get an error message at this step that indicates that Homebrew has
accidentally downloaded a file that is empty or incorrect, you can delete
Homebrew's downloaded files by running `brew cleanup`. Then try running
this step again, and Homebrew will redownload the file -- hopefully correctly!

When Homebrew is finished installing Wine, it will stop displaying messages
and wait for you to type in a new command. You may see a message that mentions
a "Mac driver" and an "X11 driver". This message is related to that XQuartz
thing we installed earlier, and it's an advanced configuration for people
who like to adjust settings on their computers. If you just want to use Wine
and don't care about adjusting settings, you can ignore that message.

# Part 4: Install Windows Programs Using Wine

To install a Windows program, first download the installer file:
it should end with .exe. Remember the location you put it, and open up
the Terminal again. `cd` to the location, and use `ls` to make sure you can
see the installer file. (Note: if you do not know what `cd` and `ls` are,
you should [learn how to use the command line](/tutorials/command-line/)
before using Wine.)

Once you are in the correct directory, run the installer through Wine
by running the following command in the Terminal:

```bash
wine $INSTALLER.exe
```

Where `$INSTALLER` is the name of the installer file. For example,
if the installer file is named `setup.exe`, you would run:

```bash
wine setup.exe
```

A window will pop up with a regular graphical Windows installer.
Click through it, and you're done!

# Part 5: Run Windows Programs Using Wine

Open up the Terminal and run this to get to your Program Files folder:

```bash
cd ~/.wine/drive_c/Program\ Files/
```

Run ls to see what programs you have installed. Pick a program,
and enter its directory using cd. (If the folder has a space in it,
you must type a \ before the space. For example, `Program\ Files`.
If you're having problems, try using tab autocomplete.)
There should be a file that ends in `.exe`: this is the program file.
Type this into Terminal:

```bash
wine $PROGRAM.exe
```

Where `$PROGRAM` is the name of the `.exe` file. For example, if the program
file is named `STARCRAFT.EXE`, you would run:

```bash
wine STARCRAFT.EXE
```

The program will pop up in a new window, ready to use!
Enjoy using Windows on your Mac, freely and legally!

# Making a Dock Icon
Many people want to be able to run Windows programs the same way
they run other programs on the Mac: by clicking an icon in the Dock.
Wine isn't specifically designed to support this, but with a little trickery,
we can make it do what we want.

**Note:** Wine prints out error messages in the Terminal when something goes wrong.
By launching Windows programs via a Dock icon, you are sidestepping the
Terminal, which means that if something *does* go wrong and Wine has to quit,
*it will not be able to tell you what the problem was*. The first step
to solving a problem is knowing what it is, so without running Wine
from the Terminal, you won't be able to fix it, and neither will anyone else.
Running from the Dock is fine as long as your program seems to be working
correctly, but if it crashes, the first thing you should try is running it
from the Terminal instead: it won't prevent the program from crashing,
but it will give you some clues on how to fix the problem.

In order to launch a Windows program via the Dock, we're going to
write an [AppleScript](https://secure.wikimedia.org/wikipedia/en/wiki/AppleScript)
that launches the program for us, and then put
that AppleScript in the Dock. Essentially, we're writing a program ourselves!
Don't worry, it's easy enough. There is a program on your computer
that is designed for helping you write AppleScripts:
it's called "Script Editor", and you can find it in the
`/Applications/Utilities` directory of your computer,
same as the Terminal itself.

Open up the Script Editor. You should see a window with a large area
you can type in near the top: this is where you write your AppleScript.
In that area, type the following text:

```applescript
tell application "Terminal"
    do script "/usr/local/bin/wine ~/.wine/drive_c/Program\\ Files/$PATH_TO_PROGRAM.exe"
end tell
```

You'll need to replace `$PATH_TO_PROGRAM` with the path from the
Program Files directory to your program executable. You can see that
you're simply telling the AppleScript to run a line of code in the Terminal:
the same line of code that you could run to start your Windows program.

Next, press the Compile button at the top of the window.
The text should become colored to indicate that Script Editor
understands what you wrote. You can also try pressing the Run button
to run your script: it should open the Windows program successfully.

Lastly, save your script. You can give it whatever name you'd like,
but be sure to select File Format: Application in the save options,
and leave Startup Screen unchecked.

Open up the Finder, go to where you saved your script, and drag that
file to your Dock. It should stay there, just like a real application --
because it *is* a real application! However, all it does is run
that launcher command for you, so you can move the application around,
rename it, or even delete it, and it won't affect the Windows program
that you're running.

# Keeping Wine Up to Date

Wine is an open source program. That means that programmers
around the world are continually improving it, adding new features
and squashing bugs. If you don't update Wine, though, it will never
get those improvements, so it's generally a good idea to check for updates
every so often. We can use Homebrew to keep Wine up to date: it's easy!
Just run this command:

```bash
brew upgrade
```

With this command, Homebrew will first update itself, if any updates
are available. It will then find all the outdated software it knows about
(including Wine) and upgrade them all to the latest version.
Checking for updates isn't strictly necessary, as Wine runs quite well
currently. However, it's a good idea to run this command every few months
or so.

# Uninstalling Wine and Homebrew

If you try Wine and you don't like it, uninstalling it is easy.
Just run this command:

```bash
brew uninstall wine
```

And Homebrew will helpfully remove Wine from your computer.
However, in order to install Wine, Homebrew also had to install many other
small programs that Wine relies upon to work correctly.
(That's why the install process takes so long!)
If you want to remove these as well,
[run this script](https://github.com/Homebrew/brew/blob/master/docs/FAQ.md#how-do-i-uninstall-homebrew):

```bash
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"
```

That script will remove everthing that you installed in this tutorial,
including Homebrew, Wine, and all the other programs Homebrew installed
to get Wine to work correctly.
